volumes:
  pgdata:

services:
  db:
    image: postgres:14-alpine
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    volumes:
      - pgdata:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    volumes:
      - ./frontend:/app/frontend
    depends_on:
      - backend

  backend: 
    build: 
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    env_file:
      - .env
    ports:
      - '8000:8000'
    volumes:
      - ./backend:/app/backend
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
  
  consumer:
    build: 
      context: ./consumer
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    command: >
      sh -c "python -m init_db && alembic upgrade head && python -m main"
  
  zookeeper:
    image: "bitnami/zookeeper:latest"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: "bitnami/kafka:latest"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_MIN_INSYNC_REPLICAS=1
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --topic hc --create --if-not-exists && kafka-topics.sh --bootstrap-server kafka:9092 --topic hc --describe"]
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 5
  
  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    env_file:
      - .env
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server ${KAFKA_HOST}:${KAFKA_PORT} --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server ${KAFKA_HOST}:${KAFKA_PORT} --create --if-not-exists --topic ${KAFKA_TOPIC} --replication-factor 1 --partitions 3

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server ${KAFKA_HOST}:${KAFKA_PORT} --list
      "